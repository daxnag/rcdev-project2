import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { ExportFileOptions, IAssetExporter } from 'webgi/extras/asset_manager/AssetManager';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { BlobExt } from 'webgi/extras/asset_manager/exporter/threejs/AssetExporter';
import { UiObjectConfig } from 'webgi/interfaces';
import { EncoderOptions } from '@gltf-transform/extensions/dist/khr-draco-mesh-compression/encoder';
export declare enum EncoderMethod {
    EDGEBREAKER = 1,
    SEQUENTIAL = 0
}
export type ExportAssetOptions = ExportFileOptions & {
    convertMeshToIndexed?: boolean;
    name?: string;
    compress?: boolean;
};
export declare class AssetExporterPlugin extends AViewerPlugin<''> {
    static readonly PluginType = "AssetExporterPlugin";
    enabled: boolean;
    exporter?: IAssetExporter;
    constructor(exporter?: IAssetExporter);
    onAdded(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    exportOptions: {
        compress: boolean;
        name: string;
        viewerConfig: boolean;
        convertMeshToIndexed: boolean;
        embedUrlImages: boolean;
        dracoOptions: EncoderOptions;
    };
    exportScene(options?: ExportAssetOptions): Promise<BlobExt | undefined>;
    downloadSceneGlb(): Promise<void>;
    private _downloadBlob;
    private _uiConfig?;
    get uiConfig(): UiObjectConfig<any, string> | {
        type: string;
        label: string;
        limitedUi: true;
        children: ({
            type: string;
            property: [{
                compress: boolean;
                name: string;
                viewerConfig: boolean;
                convertMeshToIndexed: boolean;
                embedUrlImages: boolean;
                dracoOptions: EncoderOptions;
            }, string];
            limitedUi: true;
            label?: undefined;
            children?: undefined;
        } | {
            type: string;
            label: string;
            limitedUi: true;
            children: ({
                type: string;
                label: string;
                property: [{
                    compress: boolean;
                    name: string;
                    viewerConfig: boolean;
                    convertMeshToIndexed: boolean;
                    embedUrlImages: boolean;
                    dracoOptions: EncoderOptions;
                }, string];
                limitedUi: true;
                children?: undefined;
                value?: undefined;
            } | {
                type?: undefined;
                label?: undefined;
                property?: undefined;
                limitedUi?: undefined;
                children?: undefined;
                value?: undefined;
            } | {
                type: string;
                label: string;
                children: ({
                    type: string;
                    label: string;
                    bounds: number[];
                    property: [EncoderOptions, string];
                    children?: undefined;
                } | {
                    type: string;
                    label: string;
                    property: [EncoderOptions, string];
                    children: {
                        label: string;
                    }[];
                    bounds?: undefined;
                } | {
                    type: string;
                    label: string;
                    children: {
                        type: string;
                        label: string;
                        bounds: number[];
                        stepSize: number;
                        property: [{
                            [key: string]: number;
                        } | undefined, string];
                    }[];
                    bounds?: undefined;
                    property?: undefined;
                })[];
                property?: undefined;
                limitedUi?: undefined;
                value?: undefined;
            } | {
                type: string;
                label: string;
                property: [{
                    compress: boolean;
                    name: string;
                    viewerConfig: boolean;
                    convertMeshToIndexed: boolean;
                    embedUrlImages: boolean;
                    dracoOptions: EncoderOptions;
                }, string];
                limitedUi?: undefined;
                children?: undefined;
                value?: undefined;
            } | {
                type: string;
                label: string;
                limitedUi: true;
                value: () => Promise<void>;
                property?: undefined;
                children?: undefined;
            })[];
            property?: undefined;
        } | {
            type: string;
            label: string;
            children: ({
                type: string;
                label: string;
                children: UiObjectConfig<any, string>[];
                value?: undefined;
                limitedUi?: undefined;
            } | {
                type: string;
                label: string;
                value: () => void;
                children?: undefined;
                limitedUi?: undefined;
            } | {
                type: string;
                label: string;
                limitedUi: true;
                value: () => Promise<void>;
                children?: undefined;
            })[];
            property?: undefined;
            limitedUi?: undefined;
        })[];
    };
}
//# sourceMappingURL=AssetExporterPlugin.d.ts.map